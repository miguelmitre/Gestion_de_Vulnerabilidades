{
  "name": "Vulnerability Response",
  "nodes": [
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8f41d911-71c5-41e5-9a94-f93b7e80f052",
              "leftValue": "={{ $json.plugin.cvss3_base_score }}",
              "rightValue": 9,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            },
            {
              "id": "4a03eda8-ce3d-447e-9dc4-85fc139e871b",
              "leftValue": "={{ $json.plugin?.epss_score ?? 0 }}",
              "rightValue": 0.155,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2864,
        640
      ],
      "id": "62d9c775-e8ee-4303-aa7f-35186c1d9b44",
      "name": "Filtrar por Criticidad y EPSS"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://vulners.com/api/v3/search/lucene/",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { \"query\": $json.body.query } }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3680,
        416
      ],
      "id": "f6e9646c-716c-4f69-b9d8-81472613bd13",
      "name": "Enriquecer con Vulners",
      "credentials": {
        "httpHeaderAuth": {
          "id": "0JHyLzy37b99JE5e",
          "name": "Vulners API Key"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3152,
        736
      ],
      "id": "f7c08a6d-a6cb-4285-9c21-50d92955de38",
      "name": "Fin (Baja Prioridad)"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me",
      "typeVersion": 1,
      "position": [
        3552,
        560
      ],
      "id": "ae0a2fe1-c37c-4d17-ba37-8878aa388e1b"
    },
    {
      "parameters": {
        "batchSize": 100,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        3344,
        560
      ],
      "id": "8ff93af6-26e7-4071-b89b-1319230203a0",
      "name": "Agrupar en Lotes de 100"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst ids = items.map(item => item.json.cve_id);\n\nconst queryString = ids.map(id => `id:${id}`).join(' OR ');\n\n// Creamos el cuerpo SIN la apiKey\nconst body = {\n  \"query\": queryString\n};\n\nreturn [{ json: { body } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3504,
        416
      ],
      "id": "b3e7e782-0a53-4b8e-9fa9-7a89a1bf5caf",
      "name": "Preparar Lote para Vulners"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{\n`Actúa como un analista experto en ciberseguridad y triaje de vulnerabilidades. Tu tarea es analizar el siguiente informe de vulnerabilidad, que combina datos de Tenable, CMDB, Vulners y CrowdStrike, y proporcionar un análisis completo.\n\n**DATOS DE LA VULNERABILIDAD (JSON):**\n${JSON.stringify($json, null, 2)}\n\n**TAREA SOLICITADA:**\nBasado en los datos JSON anteriores, genera un informe con las siguientes secciones:\n1.  **Análisis de Riesgo:** Evalúa el riesgo real (escala de 1 a 10), justificando tu puntuación.\n2.  **Tácticas y Técnicas (MITRE ATT&CK):** Identifica y describe las TTPs del framework MITRE ATT&CK más probables.\n3.  **Vector de Ataque:** Describe un escenario de ataque plausible y conciso.\n4.  **Plan de Remediación:** Proporciona un plan de acción técnico y detallado.\n5.  **Comunicación:** Redacta una notificación clara y concisa para el equipo de Infraestructura.`\n}}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        4704,
        416
      ],
      "id": "d20a854a-46b9-4b59-abff-6bc443597c63",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "jsCode": "// Asumimos que los datos de entrada están en el primer ítem\nconst items = $input.all();\n\n// Accedemos a la data. \n// OJO: La ruta es data.twitter_stats.cve_details\nconst cveObject = items[0].json.data.twitter_stats.cve_details;\n\n// Creamos una lista (array) vacía\nlet cveList = [];\n\n// Iteramos sobre cada \"llave\" (key) del objeto (ej. \"CVE-2021-41773\")\nfor (const cveId of Object.keys(cveObject)) {\n  \n  // Creamos un nuevo objeto para n8n\n  cveList.push({\n    json: {\n      cve_id: cveId,\n      score: cveObject[cveId].score,\n      svrs: cveObject[cveId].svrs,\n      description: cveObject[cveId].description,\n      details: cveObject[cveId].details // Esto incluye la lista de CPEs, exploits, etc.\n    }\n  });\n}\n\n// Devolvemos la lista. n8n la separará en múltiples ítems.\nreturn cveList;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -832,
        -208
      ],
      "id": "df253206-353a-4d14-b095-8f27bd011fa2",
      "name": "Normalizar Datos SOCRadar"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 8
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2016,
        400
      ],
      "id": "191e124f-9d76-4471-a18d-6cf725dc7dde",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "jsCode": "// Obtenemos los resultados del nodo anterior\nconst inputItems = $input.all();\nconst items = inputItems\n .map(item => item.json.data?.securityAdvisories?.nodes ?? [])\n .flat();\nconst normalized_vulns = [];\n\n// Recorremos cada vulnerabilidad para limpiarla\nfor (const node of items) {\n let cve_id = null;\n // Buscamos el identificador CVE\n for (const identifier of node.identifiers) {\n  if (identifier.type === \"CVE\") {\n  cve_id = identifier.value;\n  break;\n  }\n }\n\n if (cve_id) {\n  normalized_vulns.push({\n  cve_id: cve_id,\n  summary: node.summary,\n  severity: node.severity,\n  cvss_score: node.cvss ? node.cvss.score : null,\n  cvss_vector: node.cvss ? node.cvss.vectorString : null,\n  source: \"GitHub Advisory\"\n  });\n } else {\n  // AVISO: Se encontró una vulnerabilidad sin CVE.\n  console.log(`Advertencia: Se encontró una vulnerabilidad sin CVE en GitHub: ${node.summary}`);\n }\n}\n\n// Devolvemos la lista limpia\nreturn normalized_vulns;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -832,
        64
      ],
      "id": "29d39ac3-afe5-40c1-889b-2d16f7073220",
      "name": "Normalizar Datos GitHub"
    },
    {
      "parameters": {
        "url": "=https://access.redhat.com/hydra/rest/securitydata/cve.json?after={{ $now.minus({ days: 1 }).toISODate() }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1744,
        272
      ],
      "id": "c5209064-a870-4ed3-9ec8-02a7f68d6e1d",
      "name": "Red Hat - Consultar CVEs",
      "credentials": {
        "oAuth2Api": {
          "id": "xRPpfhQR6kdPUydG",
          "name": "Red Hat OAuth2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const normalized_vulns = [];\n\nfor (const item of $input.all()) {\n const vuln = item.json;\n const cvss3_data = vuln.cvss3 || {};\n normalized_vulns.push({\n  cve_id: vuln.CVE,\n  vulnerability_name: (vuln.bugzilla || {}).description,\n  severity: (vuln.severity || \"\").toUpperCase(),\n  source: \"Red Hat Advisory\",\n  cvss_score: parseFloat(cvss3_data.cvss3_base_score) || null,\n  cvss_vector: cvss3_data.cvss3_scoring_vector,\n  details_url: vuln.resource_url\n });\n}\n\nreturn normalized_vulns;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1488,
        272
      ],
      "id": "4151b100-9004-4f94-a92b-d98c062c529c",
      "name": "Normalizar Datos Red Hat"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://cloud.tenable.com/vulns/export",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        192,
        448
      ],
      "id": "4cf5f346-fbf5-406c-93df-d545640cf48e",
      "name": "Tenable - Iniciar Exportación",
      "credentials": {
        "httpHeaderAuth": {
          "id": "q85SqszrRwEldB6g",
          "name": "Tenable API n8n"
        }
      }
    },
    {
      "parameters": {
        "amount": 10
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        608,
        272
      ],
      "id": "44b543b2-6fcf-4030-9a83-fac572e8ddef",
      "name": "Wait (Bucle)",
      "webhookId": "7b5740c9-8bf8-42c4-8fb5-83ccb755e6ea"
    },
    {
      "parameters": {
        "url": "={{ 'https://cloud.tenable.com/vulns/export/' + $('Tenable - Iniciar Exportación').item.json.export_uuid + '/status' }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        416,
        272
      ],
      "id": "7da6c3ae-4225-4661-9cc0-cabe79da21ed",
      "name": "Tenable - Comprobar Estado",
      "credentials": {
        "httpHeaderAuth": {
          "id": "q85SqszrRwEldB6g",
          "name": "Tenable API n8n"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f292dbdf-6494-409b-8a12-3ef2ccf4665f",
              "leftValue": "={{ $('Tenable - Comprobar Estado').item.json.status }}",
              "rightValue": "FINISHED",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        416,
        448
      ],
      "id": "84aa2b4c-1462-4cb0-9bf7-23477acd8edd",
      "name": "¿Trabajo Terminado?"
    },
    {
      "parameters": {
        "url": "={{ 'https://cloud.tenable.com/vulns/export/' + $('Tenable - Iniciar Exportación').item.json.export_uuid + '/chunks/' + $json.chunkId }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1008,
        656
      ],
      "id": "b31c84e1-a1e0-423e-9614-5d05db5bb02e",
      "name": "Tenable - Descargar Datos",
      "credentials": {
        "httpHeaderAuth": {
          "id": "q85SqszrRwEldB6g",
          "name": "Tenable API n8n"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const vulnerabilities = $input.all().map(item => item.json).flat();\nconst normalized_vulns = [];\nconst processed_vulns = new Set(); // Para evitar duplicados en esta ejecución\n\nfor (const vuln of vulnerabilities) {\n  // Aún necesitamos extraer el CVE y el hostname para la clave única\n  const cve_list = (vuln.plugin || {}).cve || [];\n  const cve = cve_list.length > 0 ? cve_list[0] : `PLUGIN-${(vuln.plugin || {}).id}`;\n  const hostname = (vuln.asset || {}).hostname;\n\n  const unique_key = `${cve}-${hostname}`;\n\n  if (!processed_vulns.has(unique_key)) {\n    // Aquí está la magia:\n    normalized_vulns.push({\n      // 1. Copia TODOS los campos del objeto 'vuln' original.\n      ...vuln,\n      \n      // 2. Añade o sobrescribe campos personalizados para un acceso más fácil.\n      cve_id: cve, // Creamos un cve_id principal y fácil de encontrar.\n      source: \"Tenable.io\" // Mantenemos nuestra fuente personalizada.\n    });\n    \n    processed_vulns.add(unique_key);\n  }\n}\n\nreturn normalized_vulns;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1360,
        656
      ],
      "id": "e40a7cf6-c228-4e2b-ba93-3ba279dd8480",
      "name": "Normalizar Datos Tenable",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.github.com/graphql",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{\n  {\n    \"query\": `query($since: DateTime!, $after: String) {\n      securityAdvisories(orderBy: {field: PUBLISHED_AT, direction: DESC}, first: 100, publishedSince: $since, after: $after) {\n        nodes {\n          severity\n          summary\n          identifiers { type, value }\n          cvss { score, vectorString }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }`,\n    \"variables\": {\n      \"since\": $now.minus({ days: 1 }).toISO(),\n      \"after\": $json.cursor || null\n    }\n  }\n}}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1488,
        64
      ],
      "id": "e98c9be4-39eb-40a6-b661-f8d1823acd45",
      "name": "Consultar GitHub",
      "credentials": {
        "httpHeaderAuth": {
          "id": "HVVPNILyo8QP4qqS",
          "name": "GitHub API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return [{ \n  json: { \n    // El cursor inicial es nulo para que la API de Github empiece desde el principio\n    cursor: null \n  }\n}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1744,
        64
      ],
      "id": "0783be14-b9fb-47a9-b8f3-9fb55e3dc301",
      "name": "GitHub - Iniciar Bucle"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.data.securityAdvisories.pageInfo.hasNextPage }}"
            }
          ],
          "number": [
            {
              "value1": "={{ $json.data.securityAdvisories.nodes.length }}",
              "operation": "larger"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1248,
        64
      ],
      "id": "80903ef1-0519-48cc-b473-d3da74bcacfb",
      "name": "¿Hay más páginas?"
    },
    {
      "parameters": {
        "jsCode": "// Este nodo solo prepara el cursor para la siguiente iteración del bucle.\n// Pasa el 'endCursor' de la página actual para que el siguiente nodo HttpRequest\n// sepa desde dónde continuar.\nreturn [{ \n  json: { \n    cursor: (\n      $('Consultar GitHub').all().at(-1)?.json?.data?.securityAdvisories?.pageInfo?.endCursor ?? null\n    )\n  }\n}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1120,
        -144
      ],
      "id": "2a437913-0c01-46d0-9cf9-f752bfd4d6b6",
      "name": "Establecer Siguiente Cursor"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -1024,
        64
      ],
      "id": "895e6aeb-ca70-4a43-a934-b33fb35fd150",
      "name": "Fin del Bucle"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "70036cba-0ed0-4c98-b4bb-88d0ac680088",
              "leftValue": "={{ $json.cve_id }}",
              "rightValue": "CVE-",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -224,
        464
      ],
      "id": "a885aff7-0e85-4015-93cf-c5675ab3546e",
      "name": "¿Tiene CVE Válido?1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        0,
        592
      ],
      "id": "837cba28-18d4-4e52-b8b5-62e9525bae78",
      "name": "Ignorar (Sin CVE)1"
    },
    {
      "parameters": {
        "amount": 10
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        608,
        656
      ],
      "id": "b789905d-e95a-40d1-a374-6e910f870741",
      "name": "Pausa de Seguridad API",
      "webhookId": "d6708e25-2719-4cdc-9194-51514a2be240"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2359be6c-c1bf-4297-b3bf-ba130ee036f7",
              "leftValue": "={{ $('Tenable - Comprobar Estado').item.json.chunks_available.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        416,
        656
      ],
      "id": "5be9e2cc-8e09-4399-9305-346d5ae50317",
      "name": "¿Hay Archivos?"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.moveBinaryData",
      "typeVersion": 1.1,
      "position": [
        1184,
        656
      ],
      "id": "ff40a246-245d-4c2a-9c5b-0c0cdab4ca86",
      "name": "Move Binary Data"
    },
    {
      "parameters": {
        "jsCode": "// --- MÉTRICAS INICIALES (CON/SIN CVE) ---\n\n// Contamos los items que SÍ tienen CVE (los que entraron al nodo \"Code\").\nconst conCveItems = $('Preparar Consulta para Tenable').items;\nconst conCveCount = conCveItems.length;\n\n// Contamos los items que NO tienen CVE (los que entraron al nodo \"Ignorar (Sin CVE)1\").\nconst sinCveNode = $('Ignorar (Sin CVE)1');\nconst sinCveItems = sinCveNode && Array.isArray(sinCveNode.items) ? sinCveNode.items : [];\nconst sinCveCount = sinCveItems.length;\n\n\n// Calculamos el total.\nconst totalCount = conCveCount + sinCveCount;\n\n\n// --- MÉTRICAS DE TENABLE (ENCONTRADOS / NO ENCONTRADOS) ---\n\n// 1. Creamos un conjunto único con los CVEs que ENVIAMOS a Tenable.\nconst cvesEnviadosASet = new Set(conCveItems.map(item => item.json.cve_id));\n\n// 2. Obtenemos TODOS los resultados de TODAS las ejecuciones del nodo \"Normalizar Datos Tenable\".\nconst vulnsEncontradasItems = $('Normalizar Datos Tenable').items;\n// 3. Creamos un conjunto único con los CVEs que SÍ ENCONTRAMOS en Tenable.\nconst cvesEncontradosSet = new Set(vulnsEncontradasItems.map(item => item.json.cve_id));\n\n// 4. Comparamos ambas listas para saber cuáles de los que enviamos no fueron encontrados.\nconst cvesNoEncontrados = [];\nfor (const cve of cvesEnviadosASet) {\n  if (!cvesEncontradosSet.has(cve)) {\n    cvesNoEncontrados.push(cve);\n  }\n}\n\n// 5. Calculamos los contadores finales de Tenable.\nconst encontradosEnTenableCount = cvesEncontradosSet.size;\nconst noEncontradosEnTenableCount = cvesNoEncontrados.length;\n\n\n// --- OBJETO FINAL DE MÉTRICAS ---\nconst metricas = {\n  vulnerabilidades_con_cve: conCveCount,\n  vulnerabilidades_sin_cve: sinCveCount,\n  total_procesadas: totalCount,\n  encontrados_en_tenable: encontradosEnTenableCount,\n  no_encontrados_en_tenable: noEncontradosEnTenableCount\n};\n\n// Creamos el objeto de resultado final, incluyendo la lista de los no encontrados.\nconst resultadoFinal = {\n  metricas: metricas,\n  cves_no_encontrados_en_tenable: cvesNoEncontrados\n};\n\n\nreturn [{ \n  json: resultadoFinal\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2224,
        1072
      ],
      "id": "ac9789d1-410b-459a-bd3e-840494cd5d36",
      "name": "Generar Métricas"
    },
    {
      "parameters": {
        "authentication": "serviceAccount"
      },
      "type": "n8n-nodes-base.googleDocsTool",
      "typeVersion": 2,
      "position": [
        5888,
        688
      ],
      "id": "85c71a68-d36b-4eeb-a8f4-802533185b5e",
      "name": "Reporte Vulnerability Respons",
      "credentials": {
        "googleApi": {
          "id": "0Uo49GuZ29efrGFf",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "projectId": {
          "__rl": true,
          "value": "cpl-seg-tenable-prod-14052024",
          "mode": "id"
        },
        "modelName": "gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleVertex",
      "typeVersion": 1,
      "position": [
        4704,
        608
      ],
      "id": "0bde735b-0c3b-4881-aee6-bd0f2888c1a1",
      "name": "Gemini",
      "credentials": {
        "googleApi": {
          "id": "0Uo49GuZ29efrGFf",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        6128,
        464
      ],
      "id": "166e741c-bd22-4f59-8d9c-5b363ef7c502",
      "name": "Send a message",
      "webhookId": "c1266fa8-f646-4af1-a7ac-f49d900838cc",
      "credentials": {
        "googleApi": {
          "id": "0Uo49GuZ29efrGFf",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        6320,
        464
      ],
      "id": "9083f9f4-9fbf-4e83-aecb-6b26546863cc",
      "name": "Create an event"
    },
    {
      "parameters": {
        "messageUi": {},
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.googleChat",
      "typeVersion": 1,
      "position": [
        6192,
        736
      ],
      "id": "3c552090-866c-499a-a36e-9b9a7b1fa8a4",
      "name": "Create a message",
      "webhookId": "91787c39-48f4-4fa2-a1e5-fc8b2b708a6b",
      "credentials": {
        "googleApi": {
          "id": "0Uo49GuZ29efrGFf",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5936,
        464
      ],
      "id": "6468ba91-8b95-4e6f-840e-f6799550713b",
      "name": "Crear ticket VR"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": ""
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        5776,
        464
      ],
      "id": "c2ac66f0-1d89-42c6-9ae9-f10c7302c7a9",
      "name": "Buscar Dueño - CMDB",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "juE43cCRPQbdeLir",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "content": "Zona Ciberinteligencia",
        "height": 1216,
        "width": 2192
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2048,
        -224
      ],
      "typeVersion": 1,
      "id": "f85f6df3-bf97-488a-90be-e039348f25a2",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "Zona Vulnerabilidades",
        "height": 1216,
        "width": 3280,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        144,
        -224
      ],
      "typeVersion": 1,
      "id": "ac543b80-f604-4ae8-b39e-4fc1fc4e2386",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "jsCode": "// --- MODIFICA AQUÍ ---\n// Coloca el CVE específico que deseas buscar.\nconst cve_a_buscar = \"CVE-2025-49535\";\n// ---------------------\n\n// Si no se especificó un CVE en la variable, detenemos la ejecución.\nif (!cve_a_buscar) {\n  return []; // Retorna un array vacío para parar el flujo.\n}\n\n// Construimos el cuerpo (body) que la API de Tenable espera.\nconst body = {\n  \"num_assets\": 500,\n  \"filters\": {\n    \"cve_id\": [cve_a_buscar] // <-- ESTA ES LA LÍNEA CORREGIDA\n  }\n};\n\n// Devolvemos el objeto en el formato que n8n espera para el siguiente nodo.\nreturn [{\n  json: body\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        32,
        -560
      ],
      "id": "4864f199-1c62-418d-acd4-ca0848b02049",
      "name": "CVE - TENABLE"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -160,
        -560
      ],
      "id": "7e1354a8-0753-4970-88c0-28a8c92fc082",
      "name": "Schedule Trigger1"
    },
    {
      "parameters": {
        "jsCode": "// Obtiene la lista de chunks del primer elemento que llega.\nconst chunks = items[0].json.chunks_available;\n\n// Si no hay chunks, detenemos el flujo.\nif (!chunks || chunks.length === 0) {\n  return [];\n}\n\n// Transformamos la lista [1, 2, 3] en una lista de objetos,\n// cada uno con la propiedad \"chunkId\".\n// Resultado: [{ json: { chunkId: 1 } }, { json: { chunkId: 2 } }, ...]\nreturn chunks.map(id => ({ json: { chunkId: id } }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        816,
        656
      ],
      "id": "8358b2f8-38d4-4cbe-af4c-ea7a1fdf3b30",
      "name": "Separar Chunks"
    },
    {
      "parameters": {
        "jsCode": "// ==================== CÓDIGO FINAL - MODO MANUAL ====================\n\nconst mixedItems = $input.all();\nconst finalResults = [];\n\n// --- Paso 1: Separar los datos de Tenable y del EPG ---\nconst vulnerabilities = [];\nconst networkRanges = [];\n\nfor (const item of mixedItems) {\n  // Si el item tiene la propiedad \"asset\", es de Tenable.\n  if (item.json.asset) {\n    vulnerabilities.push(item);\n  }\n  // Si tiene la propiedad \"EPG NAME\", es de nuestra CMDB.\n  else if (item.json['EPG NAME']) {\n    networkRanges.push(item.json);\n  }\n}\n\nconsole.log(`Datos separados: ${vulnerabilities.length} vulnerabilidades y ${networkRanges.length} rangos de red.`);\n\n// --- Paso 2: Lógica de cruce y filtrado (la que ya conocemos) ---\n\n// Herramienta para convertir IPs a números\nfunction ipToNumber(ip) {\n  if (!ip || typeof ip !== 'string' || !ip.includes('.')) return null;\n  try {\n    return ip.split('.').reduce((acc, octet) => (acc << 8) + parseInt(octet, 10), 0);\n  } catch (e) {\n    return null;\n  }\n}\n\n// Recorremos cada vulnerabilidad\nfor (const item of vulnerabilities) {\n  const vulnerability = item.json;\n  const targetIP = vulnerability.asset?.ipv4;\n  \n  if (!targetIP) {\n    continue;\n  }\n\n  const targetIPNum = ipToNumber(targetIP);\n  \n  // Recorremos los rangos de red para encontrar un match\n  for (const range of networkRanges) {\n    // Solo procesamos rangos que contengan \"DMZ\"\n    if ((range['EPG NAME'] || '').toUpperCase().includes(\"DMZ\")) {\n      const rangeString = range.RANGE || '';\n      const match = rangeString.match(/^(.+) - (.+)$/);\n      \n      if (match) {\n        const startNum = ipToNumber(match[1]);\n        const endNum = ipToNumber(match[2]);\n\n        if (startNum !== null && endNum !== null && targetIPNum >= startNum && targetIPNum <= endNum) {\n          \n          // ¡MATCH ENCONTRADO!\n          console.log(`¡MATCH! IP ${targetIP} en rango DMZ: ${range['EPG NAME']}`);\n          \n          vulnerability.tipoRed = \"Red Perimetral\";\n          vulnerability.epgInfo = range;\n          \n          finalResults.push(item);\n          break; // Salimos del bucle de rangos\n        }\n      }\n    }\n  }\n}\n\nconsole.log(`Proceso terminado. Se encontraron ${finalResults.length} assets en la DMZ.`);\n\n// Devolvemos únicamente la lista de vulnerabilidades que hicieron match con la DMZ.\nreturn finalResults;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2640,
        640
      ],
      "id": "4e1509e4-1b9c-462f-8b3e-b11cf4677d94",
      "name": "Enriquecer y Filtrar Assets de DMZ"
    },
    {
      "parameters": {
        "content": "EPSS se bajó por pruebas 0.9",
        "height": 304
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2800,
        560
      ],
      "typeVersion": 1,
      "id": "a5356c74-9a73-4123-9dbd-b33fcf6e07f1",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "jsCode": "const criticalVulns = $input.all();\n\n// Usamos un Set para obtener automáticamente una lista de CVEs únicos,\n// evitando duplicados de forma muy eficiente.\nconst uniqueCveIds = new Set();\n\nfor (const item of criticalVulns) {\n  // Nos aseguramos de que el cve_id exista antes de añadirlo\n  if (item.json.cve_id) {\n    uniqueCveIds.add(item.json.cve_id);\n  }\n}\n\n// Convertimos el Set de IDs de nuevo a una lista de objetos para n8n.\nconst uniqueCveList = Array.from(uniqueCveIds);\n\nconsole.log(`Se encontraron ${uniqueCveList.length} CVEs únicos para enriquecer.`);\n\n// Devolvemos cada CVE en el formato que los siguientes nodos esperan.\nreturn uniqueCveList.map(cve_id => ({ json: { cve_id } }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3152,
        560
      ],
      "id": "bc01dc43-752b-4f8f-a235-7f67fd264207",
      "name": "Extraer CVEs Únicos"
    },
    {
      "parameters": {
        "jsCode": "// El input contiene activos + un objeto de Vulners al final\nconst items = $input.all();\nconst activos = items.filter(i => i.json.asset && i.json.cve_id);\nconst vulnersEntry = items.find(i => i.json.result === 'OK' && i.json.data?.search);\nif (!activos.length) {\n  throw new Error(\"No se detectaron activos críticos en la entrada.\");\n}\nif (!vulnersEntry) {\n  throw new Error(\"No se encontró información de Vulners en la entrada.\");\n}\nconst vulnersData = vulnersEntry.json;\n\n// Vulners usa un arreglo \"search\", creamos un mapa por CVE\nconst vulnersMap = new Map();\nif (Array.isArray(vulnersData.data.search)) {\n  for (let doc of vulnersData.data.search) {\n    // doc._id suele ser el CVE principal, pero también puedes mapear doc._source.cvelist (si hay más de un CVE en un doc)\n    if (doc._id) vulnersMap.set(doc._id, doc._source || doc);\n    if (doc._source?.cvelist && Array.isArray(doc._source.cvelist)) {\n      for (const cve of doc._source.cvelist) {\n        vulnersMap.set(cve, doc._source || doc);\n      }\n    }\n  }\n}\n\n// 3. Creamos una lista con los IDs de los CVEs que logramos enriquecer.\nconst enrichedCveIds = Array.from(vulnersMap.keys());\n\n// 4. Filtramos la lista original de activos.\nconst finalResults = activos\n  .filter(item => enrichedCveIds.includes(item.json.cve_id))\n  .map(item => {\n    const cveId = item.json.cve_id;\n    item.json.vulnersInfo = vulnersMap.get(cveId) || null;\n    return item;\n  });\n\nconsole.log(\"CVEs de activos críticos:\", activos.map(i => i.json.cve_id));\nconsole.log(\"CVEs enriquecidos por Vulners:\", enrichedCveIds);\nconsole.log(\"Intersección:\", activos.map(i=>i.json.cve_id).filter(id => enrichedCveIds.includes(id)));\nconsole.log(`Activos enriquecidos: ${finalResults.length} / ${activos.length}`);\n\nreturn finalResults;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4096,
        432
      ],
      "id": "58163f82-001b-4d6e-b684-cb6b2a0abc40",
      "name": "Cruzar Vulns Originales con Enriquecimiento"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        3840,
        256
      ],
      "id": "2c22387c-5f05-4e5b-8601-c9c55d875cff",
      "name": "Merge"
    },
    {
      "parameters": {
        "url": "=https://api.msrc.microsoft.com/cvrf/v3.0/cvrf/{{ $now.setLocale('en').toFormat('yyyy-MMM') }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1744,
        512
      ],
      "id": "18e19d66-1616-47db-ba7e-a96b8f6ed6eb",
      "name": "Microsoft - Consultar CVEs"
    },
    {
      "parameters": {
        "jsCode": "// Array para guardar los resultados\nconst normalized_vulns = [];\n\n// Accedemos al objeto principal del primer item\nconst data = $input.first().json;\n\n// La lista de vulnerabilidades está DENTRO de la propiedad \"Vulnerability\"\nconst vulnerabilities = data.Vulnerability;\n\n// Verificamos que 'vulnerabilities' sea una lista y no esté vacía\nif (Array.isArray(vulnerabilities) && vulnerabilities.length > 0) {\n\n  // Iteramos sobre cada objeto 'vuln' en la lista\n  for (const vuln of vulnerabilities) {\n    \n    // Si el objeto no tiene un CVE, lo saltamos\n    if (!vuln || !vuln.CVE) {\n      continue;\n    }\n\n    // --- Extracción de datos ---\n    const cvss_data = (vuln.CVSSScoreSets && vuln.CVSSScoreSets.length > 0) ? vuln.CVSSScoreSets[0] : {};\n    const descriptionNote = vuln.Notes ? vuln.Notes.find(note => note.Title === 'Description') : {};\n    const description = descriptionNote ? descriptionNote.Value : 'No description available.';\n\n    // --- Creación del objeto normalizado ---\n    normalized_vulns.push({\n      cve_id: vuln.CVE,\n      vulnerability_name: vuln.Title,\n      description: description,\n      severity: (vuln.Severity || \"UNKNOWN\").toUpperCase(),\n      source: \"Microsoft Security Response Center\",\n      published_date: vuln.InitialReleaseDate,\n      cvss_score: parseFloat(cvss_data.BaseScore) || null,\n      cvss_vector: cvss_data.Vector,\n      details_url: `https://msrc.microsoft.com/update-guide/vulnerability/${vuln.CVE}`\n    });\n  }\n}\n\n// Devolvemos la lista final. Si no se encontraron CVEs para el día, estará vacía,\n// pero el nodo ya no se detendrá por un error de \"no output\".\nreturn normalized_vulns;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1488,
        512
      ],
      "id": "41a124c3-c237-4f6c-9ac4-5d856f2b1f37",
      "name": "Normalizar Datos Microsoft"
    },
    {
      "parameters": {
        "numberInputs": 5
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -528,
        432
      ],
      "id": "5e809490-8127-4e38-a4b0-486687264479",
      "name": "Unificar Fuentes de Ciberinteligencia"
    },
    {
      "parameters": {
        "jsCode": "// Extrae todos los cve_id únicos del array de items\nconst cveSet = new Set();\nfor (const item of items) {\n  if (item.json?.cve_id) {\n    cveSet.add(item.json.cve_id);\n  }\n}\n\nconst cveList = Array.from(cveSet);\n\nif (cveList.length === 0) {\n  return [];\n}\n\nreturn [{ json: { filters: { cve_id: cveList } } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        448
      ],
      "id": "bc3a3921-9d10-43b3-a64a-0093f600eb06",
      "name": "Preparar Consulta para Tenable"
    },
    {
      "parameters": {
        "url": "https://checkmarx.com/feed/?post_type=zero-post",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.2,
      "position": [
        -1744,
        736
      ],
      "id": "10e0f361-ee13-4ba3-a3c7-5f9769abcf0a",
      "name": "Consultar Feed de Checkmarx Zero"
    },
    {
      "parameters": {
        "jsCode": "// Código para un nuevo nodo \"Normalizar Datos Checkmarx\"\nconst normalized_vulns = [];\nfor (const item of $input.all()) {\n  const vuln = item.json;\n  \n  // Lógica para extraer el CVE del título o del contenido\n  let cve_id = null;\n  const cve_match = (vuln.title + ' ' + vuln.content).match(/(CVE-\\\\d{4}-\\\\d{4,7})/);\n  if (cve_match) {\n    cve_id = cve_match[0];\n  }\n\n  normalized_vulns.push({\n    cve_id: cve_id,\n    vulnerability_name: vuln.title,\n    summary: vuln.contentSnippet,\n    details_url: vuln.link,\n    published_date: vuln.isoDate,\n    source: \"Checkmarx Zero-Day\"\n  });\n}\nreturn normalized_vulns;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1488,
        736
      ],
      "id": "3fbbf479-85d2-4e06-b78b-05ae73df8753",
      "name": "Normalizar Datos Checkmarx Zero"
    },
    {
      "parameters": {
        "jsCode": "const allItems = $input.all();\n\nfor (const item of allItems) {\n  // La data original (Tenable, CMDB, etc.) viene anidada en item.json.json\n  const originalData = item.json.json;\n  // La respuesta de la búsqueda de CrowdStrike está en el nivel superior\n  const crowdstrikeSearchResult = item.json;\n\n  let crowdstrikeInfo;\n\n  // Verificamos si la búsqueda encontró algún ID en la lista \"resources\"\n  if (crowdstrikeSearchResult.resources && crowdstrikeSearchResult.resources.length > 0) {\n    // Si se encontró, creamos el objeto de estado \"Con EDR\"\n    crowdstrikeInfo = {\n      \"status\": \"Detectado (ID Encontrado)\",\n      \"agentId\": crowdstrikeSearchResult.resources[0]\n    };\n  } else {\n    // Si no se encontró, creamos el objeto de estado \"Sin EDR\"\n    crowdstrikeInfo = {\n      \"status\": \"No Encontrado en CrowdStrike (Riesgo Elevado)\",\n      \"agentId\": \"N/A\"\n    };\n  }\n  \n  // Creamos un nuevo objeto de salida limpio, combinando la data original\n  // con nuestro nuevo campo crowdstrikeInfo.\n  item.json = { ...originalData, crowdstrikeInfo: crowdstrikeInfo };\n}\n\nreturn allItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4272,
        256
      ],
      "id": "1f801f76-b4db-4d49-a498-c2d0228a3f24",
      "name": "Definir Estado EDR"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        4448,
        416
      ],
      "id": "2810fc0e-fed6-45f6-b3c4-bee564f0ee80",
      "name": "Merge1"
    },
    {
      "parameters": {
        "preBuiltAgentsCalloutHttpRequest": "",
        "httpVariantWarning": "",
        "curlImport": "",
        "method": "GET",
        "": "",
        "url": "https://api.us-2.crowdstrike.com/devices/queries/devices/v1",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "crowdStrikeOAuth2Api",
        "provideSslCertificates": false,
        "sendQuery": true,
        "specifyQuery": "keypair",
        "queryParameters": {
          "parameters": [
            {
              "name": "filter",
              "value": "={{\n  (() => {\n    const hostname = $json.asset?.hostname;\n    const ipv4 = $json.asset?.ipv4;\n    const filterParts = [];\n    \n    // 1. Construye la parte del identificador (hostname O ipv4)\n    const identifierParts = [];\n    if (hostname) {\n      identifierParts.push(`hostname:'${hostname}'`);\n    }\n    // Verificación más robusta para una IP\n    if (ipv4 && /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/.test(ipv4)) {\n      identifierParts.push(`local_ip:'${ipv4}'`);\n    }\n\n    // Si hay al menos un identificador, lo añadimos como un grupo (entre paréntesis)\n    if (identifierParts.length > 0) {\n      filterParts.push(`(${identifierParts.join(',')})`);\n    }\n\n    // 2. Añade el filtro de actividad reciente\n    // Busca hosts vistos en los últimos 7 días. Puedes ajustar el '7d'.\n    filterParts.push(`last_seen:>'now-7d'`);\n    \n    // 3. Une todos los filtros con un operador AND (+)\n    return filterParts.join('+');\n  })()\n}}"
            }
          ]
        },
        "sendHeaders": false,
        "sendBody": false,
        "options": {},
        "infoMessage": ""
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4096,
        256
      ],
      "id": "053dbf3e-13fb-4fb3-9715-cbe63d0cf1d8",
      "name": "Buscar Host en CrowdStrike",
      "extendsCredential": "crowdStrikeOAuth2Api",
      "credentials": {
        "crowdStrikeOAuth2Api": {
          "id": "pp7j9bR1yT41WTx8",
          "name": "CrowdStrike account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        5056,
        416
      ],
      "id": "49172259-9e33-4fd0-b204-8e32e059c1d3",
      "name": "Send email",
      "webhookId": "a4962124-5e31-4d6d-abfd-9c84dd52e07e",
      "credentials": {
        "smtp": {
          "id": "VvmpFy7xvcjh36tB",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "preBuiltAgentsCalloutHttpRequest": "",
        "httpVariantWarning": "",
        "curlImport": "",
        "method": "GET",
        "": "",
        "url": "",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "fortiGateApi",
        "provideSslCertificates": false,
        "sendQuery": false,
        "sendHeaders": false,
        "sendBody": false,
        "options": {},
        "infoMessage": ""
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3440,
        32
      ],
      "id": "8c5a6773-83ea-4118-b7ee-74db872b6d7a",
      "name": "Fortinet FortiGate HTTP Request",
      "extendsCredential": "fortiGateApi"
    },
    {
      "parameters": {
        "content": "Zona Controles",
        "height": 1216,
        "width": 608,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3808,
        -224
      ],
      "typeVersion": 1,
      "id": "3293c3f9-7a38-4666-93e1-93a6fb9d46de",
      "name": "Sticky Note3"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1552,
        656
      ],
      "id": "0642da84-41c1-4be2-9222-bb291b8bc0bc",
      "name": "Unir Servidores"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// --- Funciones de Ayuda (no cambian) ---\nfunction ipToLong(ip) {\n  try {\n    if (!ip || typeof ip !== 'string' || !ip.includes('.')) return 0;\n    return ip.split('.').reduce((acc, octet) => (acc << 8) + parseInt(octet.trim(), 10), 0) >>> 0;\n  } catch (e) { return 0; }\n}\n\nfunction ipIsInRange(ip, rangeStr) {\n  try {\n    if (!ip || !rangeStr || !rangeStr.includes(' - ')) return false;\n    const [startIpStr, endIpStr] = rangeStr.split(' - ');\n    const ipLong = ipToLong(ip);\n    const startIpLong = ipToLong(startIpStr);\n    const endIpLong = ipToLong(endIpStr);\n    if (startIpLong === 0 || endIpLong === 0) return false;\n    return ipLong >= startIpLong && ipLong <= endIpLong;\n  } catch (e) { return false; }\n}\n\n\n// --- Lógica Principal ---\n// El servidor actual viene en la variable 'item'.\nconst serverItem = item;\n\n// Obtenemos las reglas de red de la SEGUNDA ENTRADA, de forma eficiente.\n// Esto NO recarga los datos en cada ejecución.\nconst networkRules = $('Leer EPGs y Redes').all();\n\n// Detectamos las IPs del servidor actual (Linux o Windows)\nconst ipPrimaria = serverItem.json['IP'] || serverItem.json['ip'];\nconst ipSecundaria = serverItem.json['IP_SEC'];\nconst serverIps = [ipPrimaria, ipSecundaria].filter(ip => ip);\n\nif (serverIps.length === 0) {\n  return null; // Descarta el item si no tiene IPs\n}\n\n// Comparamos las IPs del servidor actual con todas las reglas\nfor (const ruleItem of networkRules) {\n  const epgName = ruleItem.json['EPG NAME'];\n  const ipRange = ruleItem.json['RANGE'];\n\n  for (const currentIp of serverIps) {\n    if (epgName && ipRange && ipIsInRange(currentIp, ipRange)) {\n      if (epgName.toLowerCase().includes('dmz')) {\n        // Si encontramos una coincidencia DMZ, enriquecemos y devolvemos el item.\n        serverItem.json.tipoDeRed = 'DMZ';\n        serverItem.json.epgCoincidente = `${epgName} (IP: ${currentIp})`;\n        return serverItem;\n      }\n    }\n  }\n}\n\n// Si después de revisar todas las reglas no hubo coincidencia DMZ, descartamos el item.\nreturn null;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1744,
        656
      ],
      "id": "11f31b04-4b0a-4ba0-9e0c-4bcdda0644f0",
      "name": "Filtrar Servidores DMZ"
    },
    {
      "parameters": {
        "url": "https://platform.socradar.com/api/vulnerability/get_cve_trends",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "company_id",
              "value": "330"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1744,
        -208
      ],
      "id": "819ee8d5-862a-4187-b41d-9b2359f70f5d",
      "name": "SOC Radar - Consultar CVEs",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Cra284PgyWjGqkh2",
          "name": "SOC Radar API - Test"
        }
      }
    }
  ],
  "connections": {
    "Filtrar por Criticidad y EPSS": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "Extraer CVEs Únicos",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Fin (Baja Prioridad)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me": {
      "main": [
        [
          {
            "node": "Agrupar en Lotes de 100",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agrupar en Lotes de 100": {
      "main": [
        [
          {
            "node": "Preparar Lote para Vulners",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Lote para Vulners": {
      "main": [
        [
          {
            "node": "Enriquecer con Vulners",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enriquecer con Vulners": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Normalizar Datos SOCRadar": {
      "main": [
        [
          {
            "node": "Unificar Fuentes de Ciberinteligencia",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Red Hat - Consultar CVEs",
            "type": "main",
            "index": 0
          },
          {
            "node": "GitHub - Iniciar Bucle",
            "type": "main",
            "index": 0
          },
          {
            "node": "Microsoft - Consultar CVEs",
            "type": "main",
            "index": 0
          },
          {
            "node": "Consultar Feed de Checkmarx Zero",
            "type": "main",
            "index": 0
          },
          {
            "node": "SOC Radar - Consultar CVEs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalizar Datos GitHub": {
      "main": [
        [
          {
            "node": "Unificar Fuentes de Ciberinteligencia",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Red Hat - Consultar CVEs": {
      "main": [
        [
          {
            "node": "Normalizar Datos Red Hat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalizar Datos Red Hat": {
      "main": [
        [
          {
            "node": "Unificar Fuentes de Ciberinteligencia",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Tenable - Iniciar Exportación": {
      "main": [
        [
          {
            "node": "Tenable - Comprobar Estado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait (Bucle)": {
      "main": [
        [
          {
            "node": "Tenable - Comprobar Estado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tenable - Comprobar Estado": {
      "main": [
        [
          {
            "node": "¿Trabajo Terminado?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¿Trabajo Terminado?": {
      "main": [
        [
          {
            "node": "¿Hay Archivos?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait (Bucle)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tenable - Descargar Datos": {
      "main": [
        [
          {
            "node": "Move Binary Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalizar Datos Tenable": {
      "main": [
        [
          {
            "node": "Unir Servidores",
            "type": "main",
            "index": 0
          },
          {
            "node": "Unir Servidores",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Consultar GitHub": {
      "main": [
        [
          {
            "node": "¿Hay más páginas?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub - Iniciar Bucle": {
      "main": [
        [
          {
            "node": "Consultar GitHub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¿Hay más páginas?": {
      "main": [
        [
          {
            "node": "Establecer Siguiente Cursor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Fin del Bucle",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Establecer Siguiente Cursor": {
      "main": [
        [
          {
            "node": "Consultar GitHub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fin del Bucle": {
      "main": [
        [
          {
            "node": "Normalizar Datos GitHub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¿Tiene CVE Válido?1": {
      "main": [
        [
          {
            "node": "Preparar Consulta para Tenable",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ignorar (Sin CVE)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ignorar (Sin CVE)1": {
      "main": [
        []
      ]
    },
    "Pausa de Seguridad API": {
      "main": [
        [
          {
            "node": "Separar Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¿Hay Archivos?": {
      "main": [
        [
          {
            "node": "Pausa de Seguridad API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move Binary Data": {
      "main": [
        [
          {
            "node": "Normalizar Datos Tenable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reporte Vulnerability Respons": {
      "ai_tool": [
        []
      ]
    },
    "Gemini": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        []
      ]
    },
    "Send a message": {
      "main": [
        [
          {
            "node": "Create an event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create an event": {
      "main": [
        []
      ]
    },
    "Create a message": {
      "main": [
        []
      ]
    },
    "Buscar Dueño - CMDB": {
      "main": [
        [
          {
            "node": "Crear ticket VR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Crear ticket VR": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CVE - TENABLE": {
      "main": [
        []
      ]
    },
    "Schedule Trigger1": {
      "main": [
        [
          {
            "node": "CVE - TENABLE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separar Chunks": {
      "main": [
        [
          {
            "node": "Tenable - Descargar Datos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enriquecer y Filtrar Assets de DMZ": {
      "main": [
        [
          {
            "node": "Filtrar por Criticidad y EPSS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extraer CVEs Únicos": {
      "main": [
        [
          {
            "node": "Agrupar en Lotes de 100",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cruzar Vulns Originales con Enriquecimiento": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Cruzar Vulns Originales con Enriquecimiento",
            "type": "main",
            "index": 0
          },
          {
            "node": "Buscar Host en CrowdStrike",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft - Consultar CVEs": {
      "main": [
        [
          {
            "node": "Normalizar Datos Microsoft",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalizar Datos Microsoft": {
      "main": [
        [
          {
            "node": "Unificar Fuentes de Ciberinteligencia",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Unificar Fuentes de Ciberinteligencia": {
      "main": [
        [
          {
            "node": "¿Tiene CVE Válido?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Consulta para Tenable": {
      "main": [
        [
          {
            "node": "Tenable - Iniciar Exportación",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consultar Feed de Checkmarx Zero": {
      "main": [
        [
          {
            "node": "Normalizar Datos Checkmarx Zero",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalizar Datos Checkmarx Zero": {
      "main": [
        [
          {
            "node": "Unificar Fuentes de Ciberinteligencia",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "Definir Estado EDR": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Buscar Host en CrowdStrike": {
      "main": [
        [
          {
            "node": "Definir Estado EDR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unir Servidores": {
      "main": [
        [
          {
            "node": "Filtrar Servidores DMZ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filtrar Servidores DMZ": {
      "main": [
        []
      ]
    },
    "SOC Radar - Consultar CVEs": {
      "main": [
        [
          {
            "node": "Normalizar Datos SOCRadar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {},
  "triggerCount": 0,
  "meta": {
    "templateCredsSetupCompleted": true
  }
}