{
  "name": "Tags - Tenable Onpremise + Cloud (IFAs) - FINAL",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 8
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1360,
        -272
      ],
      "id": "46e78e2d-19c9-4156-82bf-1e0b7a703663",
      "name": "1. Inicia cada dÃ­a a las 8 AM"
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "documentId": {
          "__rl": true,
          "value": "1Yf4FCbUW6bk8mZNTdr2l8zaj1axMl0rDotVbARh8CO8",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": 2050373152,
          "mode": "list",
          "cachedResultName": "GCP_Compute_Instances"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1056,
        -272
      ],
      "id": "667dd747-25bb-409d-aec1-e3b51de20f86",
      "name": "2. CMDB - Cloud - GCP",
      "credentials": {
        "googleApi": {
          "id": "0Uo49GuZ29efrGFf",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "documentId": {
          "__rl": true,
          "value": "1Yf4FCbUW6bk8mZNTdr2l8zaj1axMl0rDotVbARh8CO8",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": 261008741,
          "mode": "list",
          "cachedResultName": "AWS_COPPEL"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1056,
        -464
      ],
      "id": "1e246269-96a0-4db1-b4d4-dff8e34fb09d",
      "name": "2. CMDB - Cloud - AWS",
      "credentials": {
        "googleApi": {
          "id": "0Uo49GuZ29efrGFf",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Helper function to validate IPv4 format\nfunction isValidIPv4(ip) {\n  if (typeof ip !== 'string') return false;\n  const blocks = ip.split('.');\n  if (blocks.length !== 4) return false;\n  return blocks.every(block => {\n    const num = parseInt(block, 10);\n    return !isNaN(num) && num >= 0 && num <= 255;\n  });\n}\n\nconst items = $input.all();\nconst batch = items.map(item => item.json);\n\nif (batch.length === 0) {\n    return [];\n}\n\n// Safely get tag info from the first item\nconst firstItem = batch[0] || {};\nconst tag_category = firstItem.tag_category;\nconst tag_value = firstItem.tag_value;\n\n// Safely extract and validate all IPs from the batch\nconst ipAddresses = batch\n  .map(item => item?.['Internal IP'] || item?.['ip']) // Resilient to column name variations\n  .filter(ip => isValidIPv4(ip)); // Process only valid IPs\n\nif (ipAddresses.length === 0) {\n  console.log(\"No valid IP addresses found in this batch.\");\n  return []; \n}\n\n// Return a single object for the Tenable sub-flow\nreturn [{\n  json: {\n    ipAddresses,\n    tag_category,\n    tag_value\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -304,
        -272
      ],
      "id": "PREPARE_TENABLE_PAYLOAD_GCP",
      "name": "3.3 Prepara Lote para Tenable - GCP"
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "documentId": {
          "__rl": true,
          "value": "1Yf4FCbUW6bk8mZNTdr2l8zaj1axMl0rDotVbARh8CO8",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": 836945875,
          "mode": "list",
          "cachedResultName": "Endpoint Group (EPG)"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1360,
        240
      ],
      "id": "bb0135e4-1ba3-4681-8eca-2ff72a8c034b",
      "name": "2. Lee EPGs y Redes",
      "credentials": {
        "googleApi": {
          "id": "0Uo49GuZ29efrGFf",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "documentId": {
          "__rl": true,
          "value": "1Yf4FCbUW6bk8mZNTdr2l8zaj1axMl0rDotVbARh8CO8",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": 24213931,
          "mode": "list",
          "cachedResultName": "Gestion de Servidores Windows"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1360,
        416
      ],
      "id": "1e149140-fe3c-4e1a-a3b6-977ddca7d401",
      "name": "2. Lee CMDB - Onpremise - Windows",
      "credentials": {
        "googleApi": {
          "id": "0Uo49GuZ29efrGFf",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "documentId": {
          "__rl": true,
          "value": "1Yf4FCbUW6bk8mZNTdr2l8zaj1axMl0rDotVbARh8CO8",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": 546329930,
          "mode": "list",
          "cachedResultName": "Servidores Administrados por Linux"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1360,
        80
      ],
      "id": "037e004b-617a-4051-ab2b-c395415f7863",
      "name": "2. Lee CMDB - Onpremise - Linux",
      "credentials": {
        "googleApi": {
          "id": "0Uo49GuZ29efrGFf",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {},
          "conditions": [
            {
              "leftValue": "={{ $json['External IP'] }}",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -848,
        -272
      ],
      "id": "FILTER_GCP_HAS_EXTERNAL_IP",
      "name": "3.1 Filtra GCP con IP Externa"
    },
    {
      "parameters": {
        "jsCode": "const item = $input.item.json;\n\nif (item['SO Base'] && item['SO Base'].toLowerCase().includes('windows')) {\n  item.tag_category = 'Google Cloud Platform (GCP)';\n  item.tag_value = 'Internet Facing Asset - Windows';\n} else {\n  item.tag_category = 'Google Cloud Platform (GCP)';\n  item.tag_value = 'Internet Facing Asset - Linux';\n}\n\nreturn item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -672,
        -272
      ],
      "id": "SET_TAGS_GCP",
      "name": "3.2 Define Tags para GCP"
    },
    {
      "parameters": {
        "batchSize": 250,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -488,
        -272
      ],
      "id": "BATCH_GCP",
      "name": "Divide GCP en Lotes"
    },
    {
      "parameters": {
        "conditions": {
          "options": {},
          "conditions": [
            {
              "leftValue": "={{ $json['External IP'] }}",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -848,
        -464
      ],
      "id": "FILTER_AWS_HAS_EXTERNAL_IP",
      "name": "3.1 Filtra AWS con IP Externa"
    },
    {
      "parameters": {
        "jsCode": "const item = $input.item.json;\n\nif (item['SO Base'] && item['SO Base'].toLowerCase().includes('windows')) {\n  item.tag_category = 'Amazon Web Services (AWS)';\n  item.tag_value = 'Internet Facing Asset - Windows';\n} else {\n  item.tag_category = 'Amazon Web Services (AWS)';\n  item.tag_value = 'Internet Facing Asset - Linux';\n}\n\nreturn item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -672,
        -464
      ],
      "id": "SET_TAGS_AWS",
      "name": "3.2 Define Tags para AWS"
    },
    {
      "parameters": {
        "batchSize": 250,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -488,
        -464
      ],
      "id": "BATCH_AWS",
      "name": "Divide AWS en Lotes"
    },
    {
      "parameters": {
        "jsCode": "// Helper function to validate IPv4 format\nfunction isValidIPv4(ip) {\n  if (typeof ip !== 'string') return false;\n  const blocks = ip.split('.');\n  if (blocks.length !== 4) return false;\n  return blocks.every(block => {\n    const num = parseInt(block, 10);\n    return !isNaN(num) && num >= 0 && num <= 255;\n  });\n}\n\nconst items = $input.all();\nconst batch = items.map(item => item.json);\n\nif (batch.length === 0) {\n    return [];\n}\n\n// Safely get tag info from the first item\nconst firstItem = batch[0] || {};\nconst tag_category = firstItem.tag_category;\nconst tag_value = firstItem.tag_value;\n\n// Safely extract and validate all IPs from the batch\nconst ipAddresses = batch\n  .map(item => item?.['Internal IP'] || item?.['ip']) // Resilient to column name variations\n  .filter(ip => isValidIPv4(ip)); // Process only valid IPs\n\nif (ipAddresses.length === 0) {\n  console.log(\"No valid IP addresses found in this batch.\");\n  return []; \n}\n\n// Return a single object for the Tenable sub-flow\nreturn [{\n  json: {\n    ipAddresses,\n    tag_category,\n    tag_value\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -304,
        -464
      ],
      "id": "PREPARE_TENABLE_PAYLOAD_AWS",
      "name": "3.3 Prepara Lote para Tenable - AWS"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://cloud.tenable.com/assets/export",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{\n  {\n    \"chunk_size\": 1000,\n    \"filters\": {\n      \"ipv4\": $json.ipAddresses\n    }\n  }\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -64,
        -368
      ],
      "id": "START_TENABLE_EXPORT",
      "name": "4. Iniciar ExportaciÃ³n en Tenable",
      "credentials": {
        "httpHeaderAuth": {
          "id": "q8nSqszrRwEldB6g",
          "name": "Tenable API n8n"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://cloud.tenable.com/assets/export/{{ $json.export_uuid }}/status",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        256,
        -368
      ],
      "id": "CHECK_EXPORT_STATUS",
      "name": "5.1 Revisar Estado de ExportaciÃ³n",
      "notesInFlow": true,
      "notes": "Este nodo sondea (polls) la API de Tenable para verificar si el trabajo de exportaciÃ³n solicitado ha finalizado.",
      "credentials": {
        "httpHeaderAuth": {
          "id": "q8nSqszrRwEldB6g",
          "name": "Tenable API n8n"
        }
      }
    },
    {
      "parameters": {
        "amount": 15,
        "unit": "seconds"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        96,
        -272
      ],
      "id": "WAIT_BEFORE_RETRY",
      "name": "Espera 15s",
      "notesInFlow": true,
      "notes": "Introduce una pausa de 15 segundos antes de volver a sondear la API. Esto evita sobrecargar la API de Tenable con peticiones constantes."
    },
    {
      "parameters": {
        "conditions": {
          "options": {},
          "conditions": [
            {
              "leftValue": "={{ $json.status }}",
              "rightValue": "FINISHED",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        },
        "options": {
          "retryOn": "on-fail"
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        432,
        -368
      ],
      "id": "IF_EXPORT_FINISHED",
      "name": "5.2 Â¿ExportaciÃ³n Terminada?",
      "notesInFlow": true,
      "notes": "Comprueba si el campo 'status' es 'FINISHED'. Si es asÃ­, procede a la descarga. Si no, el flujo se desvÃ­a hacia el nodo de espera."
    },
    {
      "parameters": {
        "url": "=https://cloud.tenable.com/assets/export/{{ $('START_TENABLE_EXPORT').item.json.export_uuid }}/chunks/1",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        608,
        -464
      ],
      "id": "DOWNLOAD_RESULTS",
      "name": "6. Descargar Resultados",
      "credentials": {
        "httpHeaderAuth": {
          "id": "q8nSqszrRwEldB6g",
          "name": "Tenable API n8n"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const assets = $input.all().map(item => item.json);\nconst assetUuids = assets.filter(asset => asset && asset.id).map(asset => asset.id);\n\nif (assetUuids.length === 0) {\n  return [];\n}\n\n// Propaga los parÃ¡metros originales para el siguiente nodo\nconst original_params = $('PREPARE_TENABLE_PAYLOAD_GCP').item.json; // o AWS, etc.\n\nreturn [{\n  json: {\n    ...original_params,\n    uuids: assetUuids\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        -464
      ],
      "id": "EXTRACT_UUIDS",
      "name": "7. Extraer UUIDs de Assets"
    },
    {
      "parameters": {
        "url": "https://cloud.tenable.com/tags/values",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        976,
        -464
      ],
      "id": "GET_ALL_TAGS",
      "name": "8. Obtener Todos los Tags",
      "credentials": {
        "httpHeaderAuth": {
          "id": "q8nSqszrRwEldB6g",
          "name": "Tenable API n8n"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const allTags = $input.item.json.values;\nconst params = $('EXTRACT_UUIDS').item.json;\n\nconst CATEGORY_TO_FIND = params.tag_category;\nconst VALUE_TO_FIND = params.tag_value;\n\nconst foundTag = allTags.find(tag => \n  tag.category_name === CATEGORY_TO_FIND && \n  tag.value === VALUE_TO_FIND\n);\n\nif (!foundTag) {\n  console.log(`Tag no encontrado: ${CATEGORY_TO_FIND} / ${VALUE_TO_FIND}`);\n  return [];\n}\n\nreturn [{\n  json: {\n    assets: params.uuids,\n    tag_uuid: foundTag.uuid\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1168,
        -464
      ],
      "id": "FIND_CORRECT_TAG_UUID",
      "name": "9. Encontrar UUID del Tag Correcto"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://cloud.tenable.com/tags/assets/assignments",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{\n  {\n    \"action\": \"add\",\n    \"tags\": [\n      $json.tag_uuid\n    ],\n    \"assets\": $json.assets\n  }\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1360,
        -464
      ],
      "id": "APPLY_TAGS",
      "name": "10. Aplicar Tag a Assets",
      "credentials": {
        "httpHeaderAuth": {
          "id": "q8nSqszrRwEldB6g",
          "name": "Tenable API n8n"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const linuxServers = $items(\"2. Lee CMDB - Onpremise - Linux\");\nconst windowsServers = $items(\"2. Lee CMDB - Onpremise - Windows\");\n\nconst processedLinux = linuxServers.map(item => ({...item.json, operatingSystem: 'Linux'}));\nconst processedWindows = windowsServers.map(item => ({...item.json, operatingSystem: 'Windows'}));\n\nreturn [...processedLinux, ...processedWindows];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -992,
        240
      ],
      "id": "MERGE_ONPREM_SERVERS",
      "name": "3.1 Une Servidores On-premise"
    },
    {
      "parameters": {
        "batchSize": 250,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -816,
        240
      ],
      "id": "BATCH_ONPREM",
      "name": "3.2 Divide On-premise en Lotes"
    },
    {
      "parameters": {
        "jsCode": "function ipToLong(ip) {\n  try {\n    if (!ip || typeof ip !== 'string' || !ip.includes('.')) return 0;\n    return ip.split('.').reduce((acc, octet) => (acc << 8) + parseInt(octet.trim(), 10), 0) >>> 0;\n  } catch (e) { return 0; }\n}\n\nconst networkRules = $items(\"2. Lee EPGs y Redes\");\n\nconst dmzRules = networkRules\n  .filter(ruleItem => {\n    const epgName = ruleItem.json['EPG NAME'];\n    const ipRange = ruleItem.json['RANGE'];\n    return epgName && epgName.toLowerCase().includes('dmz') && ipRange && ipRange !== 'N/A' && ipRange.includes(' - ');\n  })\n  .map(ruleItem => {\n    const [startIpStr, endIpStr] = ruleItem.json['RANGE'].split(' - ');\n    return { start: ipToLong(startIpStr), end: ipToLong(endIpStr) };\n  });\n\nconst serverBatch = $input.all();\nconst servidoresDmz = [];\n\nfor (const serverItem of serverBatch) {\n  const serverIps = [serverItem.json['IP'], serverItem.json['IP_SEC']].filter(ip => ip && typeof ip === 'string');\n  if (serverIps.length === 0) continue;\n\n  for (const currentIp of serverIps) {\n    const serverIpLong = ipToLong(currentIp);\n    if (serverIpLong === 0) continue;\n\n    const isDmz = dmzRules.some(rule => serverIpLong >= rule.start && serverIpLong <= rule.end);\n\n    if (isDmz) {\n      serverItem.json.is_dmz = true;\n      servidoresDmz.push(serverItem.json);\n      break;\n    }\n  }\n}\n\nreturn servidoresDmz;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -640,
        240
      ],
      "id": "FILTER_DMZ_SERVERS",
      "name": "3.3 Filtra Servidores en DMZ"
    },
    {
      "parameters": {
        "jsCode": "// Helper function to validate IPv4 format\nfunction isValidIPv4(ip) {\n  if (typeof ip !== 'string') return false;\n  const blocks = ip.split('.');\n  if (blocks.length !== 4) return false;\n  return blocks.every(block => {\n    const num = parseInt(block, 10);\n    return !isNaN(num) && num >= 0 && num <= 255;\n  });\n}\n\nconst items = $input.all();\nif (items.length === 0) {\n  return [];\n}\n\nconst firstItem = items[0].json || {};\nconst os = (firstItem.operatingSystem || '').toLowerCase().includes('windows') ? 'Windows' : 'Linux';\n\nconst ipAddresses = items\n    .map(item => item.json?.['IP'] || item.json?.['ip']) // Resilient access\n    .filter(ip => isValidIPv4(ip)); // Validate IPs\n\nif (ipAddresses.length === 0) {\n    console.log(\"No valid IP addresses found in this on-premise batch.\");\n    return [];\n}\n\nreturn [{\n  json: {\n    ipAddresses,\n    tag_category: 'Onpremise',\n    tag_value: `Demilitarized Zone (DMZ) - ${os}`\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -288,
        240
      ],
      "id": "PREPARE_TENABLE_PAYLOAD_ONPREM",
      "name": "3.5 Prepara Lote para Tenable - On-premise"
    },
    {
      "parameters": {
        "conditions": {
          "options": {},
          "conditions": [
            {
              "leftValue": "={{ $json.operatingSystem }}",
              "rightValue": "Windows",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -464,
        240
      ],
      "id": "IF_ONPREM_OS",
      "name": "3.4 Filtra por OS"
    },
    {
      "parameters": {
          "numberInputs": 3,
          "options": {}
      },
      "id": "MERGE_ONPREM_SOURCES",
      "name": "3.0 Espera Fuentes On-premise",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
          -1152,
          240
      ]
    }
  ],
  "connections": {
    "1. Inicia cada dÃ­a a las 8 AM": {
      "main": [
        [
          { "node": "2. CMDB - Cloud - GCP", "type": "main" },
          { "node": "2. CMDB - Cloud - AWS", "type": "main" },
          { "node": "2. Lee CMDB - Onpremise - Linux", "type": "main" },
          { "node": "2. Lee EPGs y Redes", "type": "main" },
          { "node": "2. Lee CMDB - Onpremise - Windows", "type": "main" }
        ]
      ]
    },
    "2. CMDB - Cloud - GCP": {
      "main": [
        [{ "node": "FILTER_GCP_HAS_EXTERNAL_IP", "type": "main" }]
      ]
    },
    "FILTER_GCP_HAS_EXTERNAL_IP": {
      "main": [
        [{ "node": "SET_TAGS_GCP", "type": "main" }]
      ]
    },
    "SET_TAGS_GCP": {
      "main": [
        [{ "node": "BATCH_GCP", "type": "main" }]
      ]
    },
    "BATCH_GCP": {
      "main": [
        [{ "node": "PREPARE_TENABLE_PAYLOAD_GCP", "type": "main" }]
      ]
    },
    "PREPARE_TENABLE_PAYLOAD_GCP": {
      "main": [
        [{ "node": "START_TENABLE_EXPORT", "type": "main" }]
      ]
    },
    "2. CMDB - Cloud - AWS": {
      "main": [
        [{ "node": "FILTER_AWS_HAS_EXTERNAL_IP", "type": "main" }]
      ]
    },
    "FILTER_AWS_HAS_EXTERNAL_IP": {
      "main": [
        [{ "node": "SET_TAGS_AWS", "type": "main" }]
      ]
    },
    "SET_TAGS_AWS": {
      "main": [
        [{ "node": "BATCH_AWS", "type": "main" }]
      ]
    },
    "BATCH_AWS": {
      "main": [
        [{ "node": "PREPARE_TENABLE_PAYLOAD_AWS", "type": "main" }]
      ]
    },
    "PREPARE_TENABLE_PAYLOAD_AWS": {
      "main": [
        [{ "node": "START_TENABLE_EXPORT", "type": "main" }]
      ]
    },
    "START_TENABLE_EXPORT": {
      "main": [
        [{ "node": "CHECK_EXPORT_STATUS", "type": "main" }]
      ]
    },
    "CHECK_EXPORT_STATUS": {
      "main": [
        [{ "node": "IF_EXPORT_FINISHED", "type": "main" }]
      ]
    },
    "IF_EXPORT_FINISHED": {
      "main": [
        [
          { "node": "DOWNLOAD_RESULTS", "type": "main" }
        ],
        [
          { "node": "WAIT_BEFORE_RETRY", "type": "main" }
        ]
      ]
    },
    "WAIT_BEFORE_RETRY": {
      "main": [
        [{ "node": "CHECK_EXPORT_STATUS", "type": "main" }]
      ]
    },
    "DOWNLOAD_RESULTS": {
      "main": [
        [{ "node": "EXTRACT_UUIDS", "type": "main" }]
      ]
    },
    "EXTRACT_UUIDS": {
      "main": [
        [{ "node": "GET_ALL_TAGS", "type": "main" }]
      ]
    },
    "GET_ALL_TAGS": {
      "main": [
        [{ "node": "FIND_CORRECT_TAG_UUID", "type": "main" }]
      ]
    },
    "FIND_CORRECT_TAG_UUID": {
      "main": [
        [{ "node": "APPLY_TAGS", "type": "main" }]
      ]
    },
    "2. Lee CMDB - Onpremise - Linux": {
        "main": [
            [
                {
                    "node": "MERGE_ONPREM_SOURCES",
                    "type": "main",
                    "index": 0
                }
            ]
        ]
    },
    "2. Lee CMDB - Onpremise - Windows": {
        "main": [
            [
                {
                    "node": "MERGE_ONPREM_SOURCES",
                    "type": "main",
                    "index": 1
                }
            ]
        ]
    },
     "2. Lee EPGs y Redes": {
        "main": [
            [
                {
                    "node": "MERGE_ONPREM_SOURCES",
                    "type": "main",
                    "index": 2
                }
            ]
        ]
    },
    "MERGE_ONPREM_SOURCES": {
        "main": [
            [
                {
                    "node": "MERGE_ONPREM_SERVERS",
                    "type": "main",
                    "index": 0
                }
            ]
        ]
    },
    "MERGE_ONPREM_SERVERS": {
      "main": [
        [{ "node": "BATCH_ONPREM", "type": "main" }]
      ]
    },
    "BATCH_ONPREM": {
      "main": [
        [{ "node": "FILTER_DMZ_SERVERS", "type": "main" }]
      ]
    },
    "FILTER_DMZ_SERVERS": {
      "main": [
        [{ "node": "IF_ONPREM_OS", "type": "main" }]
      ]
    },
    "IF_ONPREM_OS": {
      "main": [
        [
          { "node": "PREPARE_TENABLE_PAYLOAD_ONPREM", "type": "main", "outputIndex": 0 }
        ],
        [
          { "node": "PREPARE_TENABLE_PAYLOAD_ONPREM", "type": "main", "outputIndex": 1 }
        ]
      ]
    },
    "PREPARE_TENABLE_PAYLOAD_ONPREM": {
      "main": [
        [{ "node": "START_TENABLE_EXPORT", "type": "main" }]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "timezone": "America/Mexico_City",
    "errorWorkflow": "78lmCpdDZEyxMB0A"
  },
  "staticData": null
}
